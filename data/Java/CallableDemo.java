b'package callable;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\nimport static common.ThreadPoolConstants.CORE_POOL_SIZE;\nimport static common.ThreadPoolConstants.KEEP_ALIVE_TIME;\nimport static common.ThreadPoolConstants.MAX_POOL_SIZE;\nimport static common.ThreadPoolConstants.QUEUE_CAPACITY;\n\npublic class CallableDemo {\n    public static void main(String[] args) {\n        //\xe4\xbd\xbf\xe7\x94\xa8\xe9\x98\xbf\xe9\x87\x8c\xe5\xb7\xb4\xe5\xb7\xb4\xe6\x8e\xa8\xe8\x8d\x90\xe7\x9a\x84\xe5\x88\x9b\xe5\xbb\xba\xe7\xba\xbf\xe7\xa8\x8b\xe6\xb1\xa0\xe7\x9a\x84\xe6\x96\xb9\xe5\xbc\x8f\n        //\xe9\x80\x9a\xe8\xbf\x87ThreadPoolExecutor\xe6\x9e\x84\xe9\x80\xa0\xe5\x87\xbd\xe6\x95\xb0\xe8\x87\xaa\xe5\xae\x9a\xe4\xb9\x89\xe5\x8f\x82\xe6\x95\xb0\xe5\x88\x9b\xe5\xbb\xba\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(\n                CORE_POOL_SIZE,\n                MAX_POOL_SIZE,\n                KEEP_ALIVE_TIME,\n                TimeUnit.SECONDS,\n                new ArrayBlockingQueue<>(QUEUE_CAPACITY),\n                new ThreadPoolExecutor.CallerRunsPolicy());\n\n        List<Future<String>> futureList = new ArrayList<>();\n        Callable<String> callable = new MyCallable();\n        for (int i = 0; i < 10; i++) {\n            //\xe6\x8f\x90\xe4\xba\xa4\xe4\xbb\xbb\xe5\x8a\xa1\xe5\x88\xb0\xe7\xba\xbf\xe7\xa8\x8b\xe6\xb1\xa0\n            Future<String> future = executor.submit(callable);\n            //\xe5\xb0\x86\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc future \xe6\xb7\xbb\xe5\x8a\xa0\xe5\x88\xb0 list\xef\xbc\x8c\xe6\x88\x91\xe4\xbb\xac\xe5\x8f\xaf\xe4\xbb\xa5\xe9\x80\x9a\xe8\xbf\x87 future \xe8\x8e\xb7\xe5\xbe\x97 \xe6\x89\xa7\xe8\xa1\x8c Callable \xe5\xbe\x97\xe5\x88\xb0\xe7\x9a\x84\xe8\xbf\x94\xe5\x9b\x9e\xe5\x80\xbc\n            futureList.add(future);\n        }\n        for (Future<String> fut : futureList) {\n            try {\n                System.out.println(new Date() + "::" + fut.get());\n            } catch (InterruptedException | ExecutionException e) {\n                e.printStackTrace();\n            }\n        }\n        //\xe5\x85\xb3\xe9\x97\xad\xe7\xba\xbf\xe7\xa8\x8b\xe6\xb1\xa0\n        executor.shutdown();\n    }\n}\n\n'